// Retrieve saved model
const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}

// Declare model
const model = new DinnerModel();
const sections = ["search", "summary", "details"];
const summaryNav = [() => show("summary"), "Summary"];
const backToSearch =[() => show("search"), "Back to search"];
const addToMenu = [() => show("search"), "Add to menu"];
const details = new DishDetailsContainer(model, document.body.querySelector("#details"), addToMenu, backToSearch);

if (window.location.hash == "") window.location.hash = "search";
window.onhashchange = () => {
	show(window.location.hash.substring(1));
}

// Initialize controllers
new SidebarController(model, document.body.querySelector("#sidebar"));
new SummaryController(model, document.body.querySelector("#summary"), backToSearch);
new SearchController(model, document.body.querySelector("#search"), summaryNav,
	id => {
		details.render(id);
		show("details");
	});

/*	DECLARATIVE ROUTER

//route definitions
[
	["search:query:type", new SearchController(), controller.search(query, type)],
	["summary", new SummaryController()],
	["dish:id", new DishDetailsController(), controller.render(id)]	
]

//state transitions (the events must be generated by the respective controllers)
[
	["search", "dishChosen:id", "details:id"],
	["details:id", "added:id", "search"],
	["details:id", "back", "search"],
	["search", "summary", "summary"],
	["summary", "back", "search"]
]

*/

function show(section){
	sections.forEach(s => document.body.querySelector("#" + s).classList.add("hide"));
	document.body.querySelector("#" + section).classList.remove("hide");
	window.location.hash = section;
}
